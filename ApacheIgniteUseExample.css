using Apache.Ignite.Core;
using Apache.Ignite.Core.Cache;
using Apache.Ignite.Core.Cache.Configuration;
using Apache.Ignite.Core.Cache.Query;
using Apache.Ignite.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp12
{
    class Program
    {
        static void Main(string[] args)
        {
            //Ignition.Start();
            //Console.ReadLine();

            IgniteSetGetSQL();

            Console.ReadLine();
        }

        //игнат стартует - смотрим на запуск: нраииица!
        public static void IgniteRunTest()
        {
            Ignition.Start();
        }

        //загрузили кэш массивом - сняли в вывод
        public static void IgniteSetGet()
        {
            using (var ignite = Ignition.Start()) //стартанули игната
            {
                ICache<int, Car> cache = ignite.GetOrCreateCache<int, Car>("cars"); //замутили кэш машинок
                //добавили запись:

                // один строка
                //cache[1] = new Car { Model = "Pagani Zonda R", Power = 740 }; 

                //многа строка
                Random random_model = new Random();
                for (int i = 1; i <= 100; i++)
                    cache[i] = new Car() { Model = ((CarModel)random_model.Next(1, 5)).ToString(), Power = random_model.Next(1, 300) };

                //вытянули на аут
                foreach (ICacheEntry<int, Car> entry in cache)
                    Console.WriteLine(entry);
            }
        }

        //игнат и SQL: притча
        public static void IgniteSetGetSQL()
        {
            using (var ignite = Ignition.Start())
            {
                // Конфигурируем кэш для работы с SQL:
                var queryEntity = new QueryEntity(typeof(int), typeof(Car));
                var cacheConfig = new CacheConfiguration("cars", queryEntity);

                ICache<int, Car> cache = ignite.GetOrCreateCache<int, Car>(cacheConfig);

                // Вставка данных (_key - предопределённое поле):
                var insertQuery = new SqlFieldsQuery("INSERT INTO Car (_key, Model, Power) VALUES " +
                                                     "(1, 'Ariel Atom', 350), " +
                                                     "(2, 'Reliant Robin', 39)");
                cache.Query(insertQuery).GetAll();

                // Запрос данных:
                var selQuery = new SqlQuery(typeof(Car), "SELECT * FROM Car ORDER BY Power");
                foreach (ICacheEntry<int, Car> entry in cache.Query(selQuery))
                    Console.WriteLine(entry);
                //тоже самое - тока с LINQ - допом ставим  пакет Ignite.LINQ
                var linqSelect = cache.AsCacheQueryable().OrderBy(c => c.Value.Power);
                foreach (ICacheEntry<int, Car> entry in linqSelect)
                    Console.WriteLine(entry);
            }
        }
    }

    class Car
    {
        [QuerySqlField] // атрибут для SQL запросов
        public string Model { get; set; }
        [QuerySqlField]
        public int Power { get; set; }

        public override string ToString() => $"Model: {Model}, Power: {Power} hp";
    }

    enum CarModel
    {
        VAZ,
        UAZ,
        BWM,
        MersedesBenz,
        Audi,
        ZAZ
    }
}
